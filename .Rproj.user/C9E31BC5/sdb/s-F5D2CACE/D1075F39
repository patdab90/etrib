{
    "contents" : "M <- 1E+10\nMINEPS <- 1E-10\n\nsource('etriutils.R')\nsource('etribbase.R')\nsource('etribcardinalities.R')\nsource('etribpairwisecomp.R')\n\n\netrib.init <- function(performances, profiles, assignments, monotonicity, th, cardinalities, pCk, pCl) {\n  stopifnot(ncol(performances) == ncol(profiles))\n  stopifnot(is.null(assignments) || ncol(assignments) == 3)\n  stopifnot((is.null(pCk)) || (ncol(pCk) == 3))\n  stopifnot(is.null(pCl) || ncol(pCl) == 3)\n  stopifnot(nrow(assignments) < nrow(performances))\n  stopifnot(nrow(th) == ncol(performances))\n  stopifnot(nrow(th) == length(monotonicity))\n  \n  message(\"--- constructing base model\")\n  \n  n <- nrow(performances)\n  p <- nrow(profiles)-1\n  m <- ncol(performances)\n  \n  A <- 1:n ## an\n  B <- 0:p ## profile\n  H <- 1:p ## klasy \n  J <- 1:m ## j\n  \n  etrib <- list()\n  etrib$n <- n\n  etrib$p <- p\n  etrib$m <- m\n  names <- createTRIBVariables(A, H, J, pCk, pCl)\n  \n  varnames <- names$varnames\n  etrib$binary <- names$binaryVarNames\n  \n  etrib$constr$lhs <- intiMatrix(varnames)\n  etrib$constr$dir <- initDIRMatrix()\n  etrib$constr$rhs <- intiRHSMatrix()\n  \n  etrib <- buildBaseModel(etrib, performances, profiles, monotonicity, th, A, H, J)\n  etrib <- buildAEModel(etrib, J, assignments)\n  etrib <- buildCCModel(etrib, A, H, J, cardinalities)\n  etrib <- buildPConstraint(etrib, J, H, pCk, pCl)\n  \n  return(etrib)\n}\n\netrib.extremeCardinalities <- function(etrib, max){\n  colname <- \"MAX\"\n  if(!max) {\n    colname <- \"MIN\"\n  }\n  extremeCardinalities <- matrix(0, nrow=etrib$p, ncol=1, dimnames=list(paste0(\"C\",1:etrib$p),colname))\n  for(h in 1:etrib$p){\n    varnames <- c()\n    for(a in 1:etrib$n){\n      binary <- paste0(\"v(a\",a,\",h\",h,\")\")\n      varnames <- c(varnames, binary) \n    }\n    objFunction <- etriutils.buildObjectiveFunction(varnames=colnames(etrib$constr$lhs),objectivesVarNames=varnames)\n    varTypes <- etriutils.getConstraintTypes(varnames=colnames(etrib$constr$lhs),binaryVarNames=etrib$binary) \n    ret <- etriutils.solve(objectioveFunction=objFunction,varTypes=varTypes,\n                           lhs=etrib$constr$lhs,dir=etrib$constr$dir, rhs=etrib$constr$rhs,max=max)\n    extremeCardinalities[h,] <- ret$objval\n  }\n  return(extremeCardinalities)\n}\n\netrib.isFeasible <- function(etrib){\n  objFunction <- etriutils.buildObjectiveFunction(varnames=colnames(etrib$constr$lhs),objectivesVarNames=\"e\")\n  varTypes <- etriutils.getConstraintTypes(varnames=colnames(etrib$constr$lhs),binaryVarNames=etrib$binary) \n  ret <- etriutils.solve(objectioveFunction=objFunction,varTypes=varTypes,\n                         lhs=etrib$constr$lhs,dir=etrib$constr$dir, rhs=etrib$constr$rhs,max=TRUE)\n  return(ret$status$code == 0 && ret$objval > 0)\n}\n\netrib.preferenceRelation <- function(etrib){\n  \n  preferenceRelation <- matrix(FALSE,ncol=etrib$n, nrow=etrib$n, \n                               dimnames= list(paste0(\"a\",1:etrib$n), paste0(\"a\", 1:etrib$n)))\n  for(a in 1:etrib$n){\n    for(b in 1:etrib$n){\n      plModel <- buildPLModel(colnames(etrib$constr$lhs), a, b, etrib$p, 1:etrib$m)\n      lhs <- rbind(etrib$constr$lhs, plModel$lhs)\n      dir <- rbind(etrib$constr$dir, plModel$dir)\n      rhs <- rbind(etrib$constr$rhs, plModel$rhs)\n      \n      objFunction <- etriutils.buildObjectiveFunction(varnames=colnames(etrib$constr$lhs),objectivesVarNames=\"e\")\n      varTypes <- etriutils.getConstraintTypes(varnames=colnames(etrib$constr$lhs),binaryVarNames=etrib$binary) \n      ret <- etriutils.solve(objectioveFunction=objFunction,varTypes=varTypes,\n                             lhs=lhs,dir=dir, rhs=rhs,max=TRUE)\n      \n      preferenceRelation[a,b] <- ret$status$code != 0 || ret$objval < 0\n    }\n  }\n  return(preferenceRelation)\n}\n\nbuildPLModel <- function(varnames, a, b, p, J){\n  cardenality <- list(lhs = matrix(nrow=0, ncol=length(varnames)),\n                      rhs = matrix(nrow=0, ncol=1), \n                      dir = matrix(nrow=0, ncol=1))\n  for(h in 1:(p-1)){\n    rnames <- c(paste0(\"PL1.\",h), paste0(\"PL2.\",h))\n    lhs <- matrix(0, nrow=2, ncol=length(varnames), dimnames=list(rnames, varnames))\n    lhs[1,paste0(\"c\",J,\"(a\",b,\",b\",h,\")\")] = 1\n    lhs[,\"L\"] = -1\n    lhs[2,paste0(\"c\",J,\"(a\",a,\",b\",h,\")\")] = 1\n    lhs[2,\"e\"] <- 1 \n    \n    dir <- matrix(c(\">=\",\"<=\"),nrow=2, ncol=1, dimnames=list(rnames))\n    \n    rhs <- matrix(0,nrow=2, ncol=1, dimnames=list(rnames))\n    \n    cardenality$lhs <- rbind(cardenality$lhs, lhs)\n    cardenality$dir <- rbind(cardenality$dir, dir)\n    cardenality$rhs <- rbind(cardenality$rhs, rhs)\n  }\n  return(cardenality)\n}\n\netrib.possibleAssigment <- function(etrib){\n  possibleRanking <- matrix(FALSE,ncol=etrib$p, nrow=etrib$n, \n                            dimnames= list(paste0(\"a\",1:etrib$n), paste0(\"C\", 1:etrib$p)))\n  \n  for(i in 1:etrib$p){\n    for(j in 1:etrib$n){\n  \n      paModel <- buildPAModel(colnames(etrib$constr$lhs),a=j,h=i,p=etrib$p, J=1:etrib$m)\n      lhs <- rbind(etrib$constr$lhs, paModel$lhs)\n      dir <- rbind(etrib$constr$dir, paModel$dir)\n      rhs <- rbind(etrib$constr$rhs, paModel$rhs)\n      \n      objFunction <- etriutils.buildObjectiveFunction(varnames=colnames(etrib$constr$lhs),objectivesVarNames=\"e\")\n      varTypes <- etriutils.getConstraintTypes(varnames=colnames(etrib$constr$lhs),binaryVarNames=etrib$binary) \n      ret <- etriutils.solve(objectioveFunction=objFunction,varTypes=varTypes,\n                           lhs=lhs,dir=dir, rhs=rhs,max=TRUE)\n      \n      possibleRanking[j,i] <-  ret$status$code == 0 && ret$objval > 0\n    }\n  }\n\n  return(possibleRanking)\n}\n\n\n\n\nconstraintsToString <- function(lhs, dir, rhs){\n  res <- matrix(\"\", nrow=nrow(lhs), ncol=1, dimnames=list(rownames(lhs)))\n  for(j in 1:nrow(lhs)){\n    for(i in 1:ncol(lhs)){\n      if(lhs[j,i] != 0){\n        if(lhs[j,i] > 0)\n          if(lhs[j,i] == 1)\n            res[j,] <- paste(res[j,],\"+\",colnames(lhs)[i])\n        else\n          res[j,] <- paste(res[j,],\"+\",lhs[j,i],colnames(lhs)[i])\n        else\n          res[j,] <- paste(res[j,],lhs[j,i],colnames(lhs)[i])\n      }\n    }\n    res[j,] <- paste(res[j,],dir[j,],rhs[j,])\n  }\n  return(res)\n}\n\nbuildPAModel <- function(varnames,a, h, p, J){\n  cardenality <- list(lhs = matrix(nrow=0, ncol=length(varnames)),\n                      rhs = matrix(nrow=0, ncol=1), \n                      dir = matrix(nrow=0, ncol=1))\n  \n  colnames(cardenality$lhs) <- varnames\n \n  if(h > 1){\n    lhs <- matrix(0, nrow=1, ncol=length(varnames), dimnames=list(\"PA.1\", varnames))\n    lhs[1,paste0(\"c\",J,\"(a\",a,\",b\",h-1,\")\")] = 1\n    lhs[1,\"L\"] = -1\n  \n    dir <- matrix(nrow=1, ncol=1, dimnames=list(\"PA.1\"))\n    dir[1,] <- \">=\"\n    \n    rhs <- matrix(nrow=1, ncol=1, dimnames=list(\"PA.1\"))\n    rhs[1,] <- 0\n    \n    cardenality$lhs <- rbind(cardenality$lhs, lhs)\n    cardenality$dir <- rbind(cardenality$dir, dir)\n    cardenality$rhs <- rbind(cardenality$rhs, rhs)\n    \n    \n  }\n  if(h < p){\n    lhs <- matrix(0, nrow=1, ncol=length(varnames), dimnames=list(\"PA.2\", varnames))\n    lhs[1,paste0(\"c\",J,\"(a\",a,\",b\",h,\")\")] = 1\n    lhs[1,\"L\"] <- -1\n    lhs[1,\"e\"] <- 1\n   \n    dir <- matrix(nrow=1, ncol=1, dimnames=list(\"PA.2\"))\n    dir[1,] <- \"<=\"\n    \n    rhs <- matrix(nrow=1, ncol=1, dimnames=list(\"PA.2\"))\n    rhs[1,] <- 0\n    \n    cardenality$lhs <- rbind(cardenality$lhs, lhs)\n    cardenality$dir <- rbind(cardenality$dir, dir)\n    cardenality$rhs <- rbind(cardenality$rhs, rhs)\n  }\n  \n  return(cardenality)\n}\n\n\nbuildBaseModel <- function(etrib, performances, profiles, monotonicity, th, A, H, J) {\n  etrib <- createB1Constraint(etrib, J)\n  etrib <- createB2Constraint(etrib, J, H)\n  etrib <- createB4Constraint(etrib)\n  etrib <- createB5Constraint(etrib, J)\n  etrib <- createB6Constraint(etrib, performances, profiles,monotonicity, th)\n  \n  return(etrib)\n}\n\nbuildAEModel <- function(etrib, J, assignments){\n  if(is.null(assignments)) return(etrib)\n  nAs <- nrow(assignments)\n  nrows <- nAs * 2\n  rnames <- paste0(\"AE.\",1:nrows)\n  lhs <- matrix(0, nrow=nrows, ncol=ncol(etrib$constr$lhs), dimnames=list(rnames,colnames(etrib$constr$lhs)))\n  \n  row <- 0\n  for(i in 1:nAs){\n    a <- assignments[i,]\n    row <- row + 1\n    lhs[row,paste0(\"c\",J,\"(a\",a[1],\",b\",a[2]-1,\")\")] <- 1\n    lhs[row,\"L\"] <- -1\n  }\n  \n  for(i in 1:nAs){\n    a <- assignments[i,]\n    row <- row + 1\n    lhs[row,paste0(\"c\",J,\"(a\",a[1],\",b\",a[3],\")\")] <- 1\n    lhs[row,\"L\"] <- -1\n    lhs[row,\"e\"] <- 1\n  }\n  \n  etrib$constr$lhs <- rbind(etrib$constr$lhs, lhs)\n  \n  dir <- as.matrix(rep(c(\">=\",\"<=\"), each=nAs))\n  rownames(dir) <- rnames\n  etrib$constr$dir <- rbind(etrib$constr$dir, dir)\n  rhs <- as.matrix(rep(0, row))\n  rownames(rhs) <- rnames\n  etrib$constr$rhs <- rbind(etrib$constr$rhs, rhs)\n  \n  return(etrib)\n}\n\nbuildCCModel <- function(etrib, A, H, J, cardinalities){\n  \n  etrib <- createCC1Constraints(etrib, A, H)\n  etrib <- createCC2Constraints(etrib, J)\n  etrib <- createCC3Constraints(etrib, J)\n  if(is.null(cardinalities)) return(etrib)\n  etrib <- createCC4Constraints(etrib, A, cardinalities)\n  etrib <- createCC5Constraints(etrib, A, cardinalities)\n  return(etrib)\n}\n\nbuildPConstraint <- function(etrib, J, H, pCk, pCl){\n  if(!is.null(pCk)){\n    etrib <- createPC1Constrints(etrib, J, H, pCk)\n    etrib <- createPC2Constrints(etrib, J, H, pCk)\n    etrib <- createPC3Constrints(etrib, J, H, pCk)\n  }\n  if(!is.null(pCl)){\n    etrib <- createPU1Constrints(etrib, J, H, pCl)\n    etrib <- createPU2Constrints(etrib, J, H, pCl)\n    etrib <- createPU3Constrints(etrib, J, H, pCl)\n  }\n  return(etrib)\n}\n\ncreateTRIBVariables <- function(A, H, J, pCk, pCl){\n  varnames <- c()\n  \n  p <- length(H)\n  \n  varnames <- paste0(\"w\",J)\n  varnames <- c(varnames, c(\"L\"))\n  varnames <- c(varnames, c(\"e\"))\n  ##varnames = c(varnames, paste0(\"c\", J, \"(b\", p, \",b0)\"))\n\n  binaryVarNames <- c()\n  #if(FALSE)\n  for(a in A){\n    for(h in H){\n      binary <- paste0(\"v(a\",a,\",h\",h,\")\")\n      varnames <- c(varnames, binary) \n      binaryVarNames <- c(binaryVarNames, binary)\n    }\n  }\n  \n  for (a in A) {\n    for (b in 0:p) {\n      varnames <- c(varnames, paste0('c', J, '(a', a, ',b', b, ')'))\n    }\n  }\n  \n  for (b in 0:p) {    \n    for (a in A) {\n      varnames <- c(varnames, paste0('c', J, '(b', b, ',a', a, ')'))\n    }\n  }\n  if(!is.null(pCk))\n  for(row in 1:nrow(pCk)){\n    pck <- pCk[row,]\n    binary <- paste0(\"v(a\",pck[1],\",b\",pck[2],\",>=\",pck[3],\",h\",1:(p-pck[3]),\")\")\n    varnames <- c(varnames, binary)\n    binaryVarNames <- c(binaryVarNames, binary)\n  }\n  \n  if(!is.null(pCl))\n  for(row in 1:nrow(pCl)){\n    pcl <- pCl[row,]\n    binary <- paste0(\"v(a\",pcl[1],\",b\",pcl[2],\",<=\",pcl[3],\",h\",1:(p-pcl[3]),\")\")\n    varnames <- c(varnames, binary)\n    binaryVarNames <- c(binaryVarNames, binary)\n  }\n  \n  return(list(varnames=varnames, binaryVarNames=binaryVarNames))\n}\n\nintiMatrix <- function(names){\n  \n  lhs <- matrix(0, ncol=length(names), nrow=1,dimnames=list(\"E\",names))\n  lhs[\"E\",\"e\"] <- 1\n  return(lhs)\n}\n\ninitDIRMatrix <- function(){\n  dir <- matrix(c(\">=\"))\n  rownames(dir) <- c(\"E\")\n  return(dir)\n}\n\nintiRHSMatrix <- function(){\n  rhs <- matrix(MINEPS)\n  rownames(rhs) <- \"E\"\n  return(rhs)\n}\n\n",
    "created" : 1406458382118.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3041803549",
    "id" : "D1075F39",
    "lastKnownWriteTime" : 1406503501,
    "path" : "C:/Users/Patryk/Desktop/Praca Magisterska/ELECTRE TRI B/etrib/etrib.R",
    "project_path" : "etrib.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}