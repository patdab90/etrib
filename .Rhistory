x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.possibleAssigment(etrib=etri)
x
View(x)
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
DEBUG <- c()
x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
DEBUG <- c()
x <- etrib.possibleAssigment(etrib=etri)
x
source.with.encoding('C:/Users/Patryk/Desktop/Praca Magisterska/ELECTRE TRI B/etrib/main.R', encoding='UTF-8')
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, TRUE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.possibleAssigment(etrib=etri)
x
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etrib.R')
#warianty
alts <- read.table(file="alts.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
## przykładowe przdziały do klas
assigs1 <- matrix(c(
1, 1, 2,
5, 2, 2),ncol=3, byrow=TRUE)
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- matrix(c(
1, 2, 10,
3, 5, 20), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(
1, 2, 2,
3, 2, 1), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etrib.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
x <- etrib.necessaryAssigment(etrib=etri)
x
